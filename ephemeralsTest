from astroquery.jplhorizons import Horizons
import numpy as np

# Function to calculate the true anomaly
def true_anomaly(e, M):
    """
    Calculate the true anomaly from mean anomaly and eccentricity.
    :param e: Orbital eccentricity
    :param M: Mean anomaly in radians
    :return: True anomaly in radians
    """
    E = M  # Start with E = M as an initial guess
    for _ in range(100):  # Iteratively solve Kepler's equation
        E_new = M + e * np.sin(E)
        if np.abs(E_new - E) < 1e-6:
            E = E_new
            break
        E = E_new
    # Compute true anomaly
    theta = 2 * np.arctan2(np.sqrt(1 + e) * np.sin(E / 2),
                           np.sqrt(1 - e) * np.cos(E / 2))
    return theta

# Query JPL Horizons for Earth's orbital elements on a specific date
obj = Horizons(id=399, location="399", epochs="2460639.2097337963")
orbital_elements = obj.elements()

# Extract required elements
eccentricity = orbital_elements['e'][0]
mean_anomaly_deg = orbital_elements['M'][0]

# Convert mean anomaly to radians
mean_anomaly_rad = np.radians(mean_anomaly_deg)

# Calculate true anomaly
true_anomaly_rad = true_anomaly(eccentricity, mean_anomaly_rad)
true_anomaly_deg = np.degrees(true_anomaly_rad)

print(f"True Anomaly: {true_anomaly_deg:.2f} degrees")
